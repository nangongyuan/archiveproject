<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
    <l:layout title="Archived Project" >
        <l:side-panel>
            <!--
            <h1><strong>Archived Projects:</strong></h1>
            <form>
                <j:choose>
                    <j:when test="${!it.archivedProjects.isEmpty()}">
                        <j:forEach var="archiveProject" items="${it.archivedProjects}">
                            <li>${archiveProject}</li>
                        </j:forEach>
                    </j:when>
                    <j:otherwise>
                        There are no archived projects.
                    </j:otherwise>
                </j:choose>
            </form>
            -->
            <l:task contextMenu="false" href="${rootURL}/" icon="icon-up icon-md" title="${%Back to Dashboard}"/>
            <l:pane width="20" title="Backups">
            <tr>
                <th class="pane" align="left">NO.</th>
                <th class="pane" align="left">User</th>
                <th class="pane" align="left">Date</th>
                <th class="pane" align="left">Result</th>
            </tr>
            <j:forEach var="backups" items="${it.archiveWidget.backupsList}">
                <tr>
                    <td class="pane" align="left">#${backups.number}</td>
                    <td class="pane" align="left">${backups.user}</td>
                    <td class="pane" align="left">${backups.date}</td>
                    <td class="pane" align="left">${backups.result}</td>
                </tr>
            </j:forEach>
            </l:pane>
        </l:side-panel>
        <l:main-panel>
            <h3>Build Information:</h3>
            <f:entry name="buildNumber" title="Choose Build Number: " field="buildNumber">
                <select name="buildNumber" id="buildNo" onchange="Show_Parameters()">
                    <j:forEach var="backups" items="${it.archiveWidget.backupsList}">
                        <option value="${backups.number}">${backups.number}</option>
                    </j:forEach>
                </select>
            </f:entry>
            <h3>Build Parameters:</h3>
            <f:form name="build" action="buildSubmit" method="post" tableClass="parameters">
            <table id="parameterTable" width="70%" class="parameters">
            <script>
                function Show_Parameters(){
                    var archive_obj = <st:bind value="${it}" />;
                    var buildNo = document.getElementById('buildNo');
                    var buildNumber = buildNo.options[buildNo.selectedIndex].text;
                    //console.log("selected value:" + buildNumber);
                    archive_obj.GetParameters(buildNumber, function(map){
                        htmlString = '';
                        for (var index in map.responseJSON){
                            switch(map.responseJSON[index]["type"]){
                                case "hudson.model.BooleanParameterValue":
                                    nameStr = map.responseJSON[index]["name"].toString();
                                    valueStr = map.responseJSON[index]["value"].toString();
                                    htmlString = htmlString + '<tbody><f:entry title="' + nameStr + '"><div name="parameter" ><input type="hidden" name="name" value="' + valueStr +'" /><f:checkbox name="value" checked="' + valueStr +'" /></div></f:entry></tbody>';
                                    console.log(htmlString);
                                    break;
                                case "hudson.model.StringParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.PasswordParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.TextParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.ValidatingStringParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.RunParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.RandomStringParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.NodeParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.MavenMetadataParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.ListSubversionTagsParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.LabelParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.FileParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                case "hudson.model.ExtendedChoiceParameterValue":
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                                    break;
                                default:
                                    console.log(map.responseJSON[index]["name"]);
                                    console.log(map.responseJSON[index]["value"]);
                            }
                        }
                    var parameterTable = document.getElementById('parameterTable');
                    parameterTable.innerHTML = htmlString.trim();
                    });
                }
                document.addEventListener("DOMContentLoaded", function(){
                    Show_Parameters();
                });
            </script>
            </table>
            <br/>
            <f:block>
                <f:submit value="Rebuild" />
            </f:block>
            </f:form>
        </l:main-panel>
    </l:layout>
</j:jelly>